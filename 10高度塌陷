  文档流中，无论块元素或内联元素，父元素高度默认由子元素撑开。当子元素脱离文档流，则无法撑开父元素，因此会出现【子元素脱离文档流后，父元素高度坍塌，
影响布局】的现象。

了解内容 =>{
 内容1：
  根据W3C标准，每个元素都拥有一个隐藏属性：Block Formatting Context（简称BFC），默认关闭。
  
  打开BFC属性后，元素将拥有以下特点：
  1.父元素垂直margin不再与开启BFC的子元素重叠（即使看起来重合，但是此时设置margin-top下移子元素将不会影响到父元素）；
  2.开启BFC的元素不会被浮动元素所覆盖；
  3.开启BFC的元素可以包含浮动元素。
  
  BFC属性无法直接打开，间接打开BFC的方法：
  1.设置元素浮动；
  2.设置绝对定位；
  3.设置元素为inline-block;
  4.设置overflow为一个非visible的值（hidden>auto>scroll).
  
 内容2：
  CSS样式中clear属性可以消除其他浮动元素对本元素的影响（即其他元素浮动，使得本元素位置上移，设置clear后可以清除影响，使本元素保持原来位置）。
  
 内容3：
  IE6及以下不支持BFC属性，也不支持伪元素:after。但对应BFC属性，它有一个类似的hasLayout隐藏属性。
  间接打开hasLayout的方法其中有：
  1.设置zoom：1；
  2.设置width。
}


  解决父元素高度塌陷问题（【下面均为子元素设置float脱离文档流的情况，absolute不适用】），一般浏览器可以按上面四种方式设置父元素打开BFC属性，
设置后可以使父元素高度被脱离文档流的子元素撑开；也可以利用clear属性，在父元素中添加一个空白元素（一般用css添加一个:after伪元素），设置clear清除
浮动影响，由这个空白元素撑开父元素高度。
  副作用：
  方式1，方式2，方式3会使父元素丢失100%的宽度，变成同时由脱离文档流的子元素撑开宽度，需要保留宽度则不推荐；
  方式4可能会影响父元素中开启了absolute的子元素（被隐藏），确认没有子元素开启absolute时可以使用；
  方法5副作用几乎没有（至少暂时没有发现），推荐使用。
  
  
  综上，解决父元素高度塌陷问题一般采取的方法：
  大多浏览器：.clearfix:after{
                content: "";
                display: block;
                clear: both;
              } //为所有需要撑开高度的父元素添加class=clearfix
  IE浏览器：  zoom: 1; //在所有需要撑开高度的父元素样式中添加
  
  
