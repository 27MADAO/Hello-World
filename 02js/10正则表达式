    /*
     * 正则表达式
     */

    //创建
    //1常用方法，var 变量名 = /正则表达式/[匹配模式](可省)
    //  匹配模式有：i无视大小写；g全局匹配
    var reg = /a/i;
    //2标准方法，new一个正则对象，传参（字符串形式）："正则表达式"，["匹配模式"]。
    var reg2 = new RegExp("a", "i");

    //test()方法：检查是否符合规则，返回true/false
    //exec()方法：返回匹配的内容，如果在reg表达式中用括号括出部分内容，则会同时把括住的内容填入数组返回
    var reg3 = /[abc]d/; //[]里为或的关系，也可以a|b|c；[]可以简写[a-c],表从a到c
    console.log(reg3.test("cd")); //true

    //正则表达式相关
    //   1.与：XY，直接相连
    //     或：X|Y，用|隔开；或[X,Y]，逗号隔开
    //     非：[^XY]，在[]里加^取非
    //   2.以之开头：^XY,与非比较不加[]
    //     以之结尾: XY&，末尾加$
    //   3.量词
    //     {n}：出现n次
    //     {m,n}：出现m至n次，包含m与n
    //     {m, }：出现m次及其以上
    //     +: 出现一次及其以上，同{1, }
    //     *: 无所谓几次，爱出现不出现，同{0, }
    //     ?: 出现0次或1次，同{0, 1}




    /*
     * 正则表达式与字符串方法连用
     * 常用支持正则的字符串方法：split()拆分为数组，search()查找索引，match()取出内容，replace()替换内容
     */

    //创建字符串用例
    var str = "a1b2c34d5F6E7F8d9c";

    /*1.字符串方法split()：将字符串拆分成数组，传参作为拆分依据。*/
    // (数组方法join()：将数组合并为字符串，传参作为各元素之间的连接符。)
    // 分别拆出字母和数字
    var res1 = str.split(/[a-z]/i); //按照字母拆分，不区分大小写。 /[a-z]/i 等同 /[A-z]/
    var res2 = str.split(/[0-9]/); //按照数字差分
    console.log(res1, res2); //[ "", "1", "2", "34", "5", "6", "7", "8", "9", "" ]
                             //[ "a", "b", "c", "", "d", "F", "E", "F", "d", "c" ]
    // console.log(res1.join(""), res2.join("")); //123456789 abcdFEFdc

    /*2.字符串方法search()：查找符合规则的内容的索引，找到一次就不再继续找*/
    // 找出第一出现大写字母的位置
    var res3 = str.search(/[A-Z]/);
    console.log(res3); //9

    /*3.字符串方法match()：查找符合规则的内容，封装成数组返回*/
    // 找出大写字母的内容
    var res4 = str.match(/[A-Z]/);
    console.log(res4); //[ "F" ]
    var res5 = str.match(/[A-Z]/g);
    console.log(res5); //[ "F", "E", "F" ]

    /*4.字符串方法replace():传入两个参数，将前者（可以是正则）替换成后者，返回新字符串*/
    var res6 = str.replace(/[0-9]/,"_");
    console.log(res6); //a_b2c34d5F6E7F8d9c
    var res7 = str.replace(/[0-9]/g,"_");
    console.log(res7); //a_b_c__d_F_E_F_d_c

    //综上：
    //基本需要加g指定全局匹配模式
    //两个特例：split()不加也是找全局，search()加了也是找一次
