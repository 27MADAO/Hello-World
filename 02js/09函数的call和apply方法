    /*
     * call（）和apply（）
     */
     
    //不加参数时都是对函数的调用
    function fun() {
      console.log("hhhhhh");
    }
    fun(); //hhhhhh
    fun.call(); //hhhhhh
    fun.apply(); //hhhhhh

    //可以传入一个对象作为第一个参数，用来修改上下文，使this指代所传入的这个参数
    var obj = {
      name: "zhangSan",
      display: function () {
        console.log(this.name)
      },
    };
    var obj2 = {
      name: "liSi",
    };
    obj.display.call(obj); //zhangSan
    obj.display.call(obj2); //liSi
    obj.display.apply(obj); //zhangSan
    obj.display.apply(obj2); //liSi
    var name = "wwww";
    obj.display.call();  //wwww
    obj.display.apply(); //wwww,
                         // 传入null和undefined也是这样
                         // 说明使用call（）和apply后，如果不传入有效对象，会默认修改this为window全局

    //call()和apply()传递实参的方式不同
    function fun2(a,b){
      console.log("a="+ a +", b=" + b);
    }
    fun2.call(window,2,3);
    fun2.apply(window,[2,3]);

    //综上：
    //fun(),fun.call(),fun.apply()都会调用fun函数，但是后两者会修改this为window
    //call()和apply()传入一个有效对象后，会将这个对象设为第一个参数，并且修改this指向传入的对象
    //如果需要传入函数实参，call()写在后面就行，apply()需要用[]包裹成数组形式
    
    
